import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_gen/gen_l10n/app_localizations.dart';
import 'package:animate_do/animate_do.dart';
import 'package:glass_kit/glass_kit.dart';

import '../../../../services/auth/unified_auth_service.dart';
import '../../../../presentation/common_widgets/buttons/modern_social_button.dart';
import '../../../../presentation/common_widgets/forms/email_auth_form.dart';
import '../../domain/models/auth_user.dart';

class ModernLoginScreen extends StatefulWidget {
  const ModernLoginScreen({Key? key}) : super(key: key);

  @override
  State<ModernLoginScreen> createState() => _ModernLoginScreenState();
}

class _ModernLoginScreenState extends State<ModernLoginScreen>
    with TickerProviderStateMixin {
  final UnifiedAuthService _authService = UnifiedAuthService.instance;
  
  late AnimationController _backgroundController;
  late AnimationController _fadeController;
  late Animation<double> _backgroundAnimation;
  late Animation<double> _fadeAnimation;
  
  bool _isLoading = false;
  bool _autoLoginEnabled = false;
  AuthProvider? _loadingProvider;

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _initializeAuthService();
  }

  void _initializeAnimations() {
    _backgroundController = AnimationController(
      duration: const Duration(seconds: 3),
      vsync: this,
    );
    
    _fadeController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );

    _backgroundAnimation = Tween<double>(
      begin: 0,
      end: 1,
    ).animate(CurvedAnimation(
      parent: _backgroundController,
      curve: Curves.easeInOut,
    ));

    _fadeAnimation = Tween<double>(
      begin: 0,
      end: 1,
    ).animate(CurvedAnimation(
      parent: _fadeController,
      curve: Curves.easeOutCubic,
    ));

    _backgroundController.repeat(reverse: true);
    _fadeController.forward();
  }

  Future<void> _initializeAuthService() async {
    await _authService.initialize();
    setState(() {
      _autoLoginEnabled = _authService.getAutoLogin();
    });
    
    // 자동 로그인 시도
    if (_autoLoginEnabled) {
      _tryAutoLogin();
    }
  }

  Future<void> _tryAutoLogin() async {
    setState(() {
      _isLoading = true;
      _loadingProvider = _authService.getLastAuthProvider();
    });

    try {
      final user = await _authService.tryAutoLogin();
      if (user != null) {
        _handleLoginSuccess(user);
      }
    } catch (e) {
      _showErrorSnackBar('자동 로그인 실패: $e');
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
          _loadingProvider = null;
        });
      }
    }
  }

  @override
  void dispose() {
    _backgroundController.dispose();
    _fadeController.dispose();
    super.dispose();
  }

  Future<void> _handleEmailAuth() async {
    await showDialog<void>(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) => _EmailAuthDialog(),
    );
  }

  Future<void> _handleGoogleLogin() async {
    await _performLogin(AuthProvider.google, () => _authService.signInWithGoogle());
  }

  Future<void> _handleFacebookLogin() async {
    await _performLogin(AuthProvider.facebook, () => _authService.signInWithFacebook());
  }

  Future<void> _handleKakaoLogin() async {
    await _performLogin(AuthProvider.kakao, () => _authService.signInWithKakao());
  }

  Future<void> _performLogin(AuthProvider provider, Future<AuthUser?> Function() loginMethod) async {
    setState(() {
      _isLoading = true;
      _loadingProvider = provider;
    });

    try {
      final user = await loginMethod();
      if (user != null) {
        await _authService.setAutoLogin(_autoLoginEnabled);
        _handleLoginSuccess(user);
      }
    } catch (e) {
      _showErrorSnackBar('로그인 실패: $e');
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
          _loadingProvider = null;
        });
      }
    }
  }

  void _handleLoginSuccess(AuthUser user) {
    // 햅틱 피드백
    HapticFeedback.lightImpact();
    
    // 성공 애니메이션 후 네비게이션
    Future.delayed(const Duration(milliseconds: 300), () {
      if (mounted) {
        Navigator.of(context).pushReplacementNamed('/home');
      }
    });
  }

  void _showErrorSnackBar(String message) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: Theme.of(context).colorScheme.error,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          margin: const EdgeInsets.all(16),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final mediaQuery = MediaQuery.of(context);
    final l10n = AppLocalizations.of(context)!;

    return Scaffold(
      body: AnimatedBuilder(
        animation: _backgroundAnimation,
        builder: (context, child) {
          return Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  Color.lerp(
                    const Color(0xFF667EEA),
                    const Color(0xFF764BA2),
                    _backgroundAnimation.value * 0.3,
                  )!,
                  Color.lerp(
                    const Color(0xFF764BA2),
                    const Color(0xFF667EEA),
                    _backgroundAnimation.value * 0.3,
                  )!,
                  Color.lerp(
                    const Color(0xFF667EEA),
                    const Color(0xFF764BA2),
                    _backgroundAnimation.value * 0.2,
                  )!,
                ],
              ),
            ),
            child: SafeArea(
              child: FadeTransition(
                opacity: _fadeAnimation,
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 24),
                  child: Column(
                    children: [
                      // 상단 여백
                      SizedBox(height: mediaQuery.size.height * 0.08),
                      
                      // 헤더 섹션
                      _buildHeader(theme, l10n),
                      
                      // 메인 콘텐츠
                      Expanded(
                        child: Center(
                          child: SingleChildScrollView(
                            child: _buildLoginForm(theme, l10n),
                          ),
                        ),
                      ),
                      
                      // 하단 여백
                      SizedBox(height: mediaQuery.size.height * 0.05),
                    ],
                  ),
                ),
              ),
            ),
          );
        },
      ),
    );
  }

  Widget _buildHeader(ThemeData theme, AppLocalizations l10n) {
    return FadeInDown(
      duration: const Duration(milliseconds: 800),
      child: Column(
        children: [
          // 앱 로고
          Container(
            width: 120,
            height: 120,
            decoration: BoxDecoration(
              gradient: const LinearGradient(
                colors: [Colors.white, Color(0xFFF8F9FA)],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
              borderRadius: BorderRadius.circular(30),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 20,
                  offset: const Offset(0, 10),
                ),
              ],
            ),
            child: const Icon(
              Icons.child_care,
              size: 60,
              color: Color(0xFF667EEA),
            ),
          ),
          
          const SizedBox(height: 24),
          
          // 앱 제목
          Text(
            'Baby One More Time',
            style: theme.textTheme.headlineMedium?.copyWith(
              color: Colors.white,
              fontWeight: FontWeight.bold,
              letterSpacing: 0.5,
            ),
          ),
          
          const SizedBox(height: 8),
          
          // 부제목
          Text(
            l10n.appTagline,
            style: theme.textTheme.bodyLarge?.copyWith(
              color: Colors.white.withOpacity(0.8),
              fontWeight: FontWeight.w400,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildLoginForm(ThemeData theme, AppLocalizations l10n) {
    return FadeInUp(
      duration: const Duration(milliseconds: 800),
      delay: const Duration(milliseconds: 200),
      child: GlassContainer.clearGlass(
        height: null,
        width: double.infinity,
        borderRadius: BorderRadius.circular(24),
        child: Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(24),
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                Colors.white.withOpacity(0.2),
                Colors.white.withOpacity(0.1),
              ],
            ),
            border: Border.all(
              color: Colors.white.withOpacity(0.3),
              width: 1,
            ),
          ),
          child: Padding(
            padding: const EdgeInsets.all(24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                // 환영 메시지
                Text(
                  '환영합니다!',
                  style: theme.textTheme.headlineSmall?.copyWith(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                  ),
                  textAlign: TextAlign.center,
                ),
                
                const SizedBox(height: 8),
                
                Text(
                  '로그인하여 아이의 소중한 순간들을 기록해보세요',
                  style: theme.textTheme.bodyMedium?.copyWith(
                    color: Colors.white.withOpacity(0.8),
                  ),
                  textAlign: TextAlign.center,
                ),
                
                const SizedBox(height: 32),
                
                // 로그인 버튼들
                _buildLoginButtons(),
                
                const SizedBox(height: 24),
                
                // 자동 로그인 체크박스
                _buildAutoLoginCheckbox(theme),
                
                const SizedBox(height: 16),
                
                // 약관 동의 텍스트
                _buildTermsText(theme, l10n),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildLoginButtons() {
    return Column(
      children: [
        // 이메일 로그인
        ModernSocialButton(
          provider: SocialProvider.email,
          onPressed: _handleEmailAuth,
          isLoading: _isLoading && _loadingProvider == AuthProvider.email,
        ),
        
        const SizedBox(height: 16),
        
        // 구글 로그인
        ModernSocialButton(
          provider: SocialProvider.google,
          onPressed: _handleGoogleLogin,
          isLoading: _isLoading && _loadingProvider == AuthProvider.google,
        ),
        
        const SizedBox(height: 16),
        
        // 페이스북 로그인
        ModernSocialButton(
          provider: SocialProvider.facebook,
          onPressed: _handleFacebookLogin,
          isLoading: _isLoading && _loadingProvider == AuthProvider.facebook,
        ),
        
        const SizedBox(height: 16),
        
        // 카카오 로그인
        ModernSocialButton(
          provider: SocialProvider.kakao,
          onPressed: _handleKakaoLogin,
          isLoading: _isLoading && _loadingProvider == AuthProvider.kakao,
        ),
      ],
    );
  }

  Widget _buildAutoLoginCheckbox(ThemeData theme) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Transform.scale(
          scale: 1.2,
          child: Checkbox(
            value: _autoLoginEnabled,
            onChanged: (value) {
              setState(() {
                _autoLoginEnabled = value ?? false;
              });
            },
            fillColor: WidgetStateProperty.resolveWith((states) {
              if (states.contains(WidgetState.selected)) {
                return Colors.white;
              }
              return Colors.transparent;
            }),
            checkColor: const Color(0xFF667EEA),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(4),
            ),
            side: BorderSide(
              color: Colors.white.withOpacity(0.7),
              width: 2,
            ),
          ),
        ),
        const SizedBox(width: 8),
        GestureDetector(
          onTap: () {
            setState(() {
              _autoLoginEnabled = !_autoLoginEnabled;
            });
          },
          child: Text(
            '자동 로그인',
            style: theme.textTheme.bodyMedium?.copyWith(
              color: Colors.white.withOpacity(0.9),
              fontWeight: FontWeight.w500,
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildTermsText(ThemeData theme, AppLocalizations l10n) {
    return Text(
      l10n.termsNotice,
      style: theme.textTheme.bodySmall?.copyWith(
        color: Colors.white.withOpacity(0.7),
        height: 1.4,
      ),
      textAlign: TextAlign.center,
    );
  }

  Widget _EmailAuthDialog() {
    return StatefulWidget(
      child: _EmailAuthDialogState(),
    );
  }
}

class _EmailAuthDialogState extends StatefulWidget {
  @override
  State<_EmailAuthDialogState> createState() => __EmailAuthDialogStateState();
}

class __EmailAuthDialogStateState extends State<_EmailAuthDialogState> {
  EmailAuthMode _mode = EmailAuthMode.signIn;
  bool _isLoading = false;
  final UnifiedAuthService _authService = UnifiedAuthService.instance;

  Future<void> _handleEmailAuth(String email, String password, [String? displayName]) async {
    setState(() {
      _isLoading = true;
    });

    try {
      AuthUser? user;
      if (_mode == EmailAuthMode.signUp) {
        user = await _authService.signUpWithEmail(email, password, displayName!);
      } else {
        user = await _authService.signInWithEmail(email, password);
      }

      if (user != null && mounted) {
        Navigator.of(context).pop();
        Navigator.of(context).pushReplacementNamed('/home');
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(e.toString()),
            backgroundColor: Theme.of(context).colorScheme.error,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  Future<void> _handleForgotPassword() async {
    // 비밀번호 재설정 다이얼로그 구현
    final emailController = TextEditingController();
    
    await showDialog<void>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('비밀번호 재설정'),
        content: TextField(
          controller: emailController,
          decoration: const InputDecoration(
            labelText: '이메일',
            hintText: '가입하신 이메일을 입력해주세요',
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('취소'),
          ),
          ElevatedButton(
            onPressed: () async {
              try {
                await _authService.resetPassword(emailController.text.trim());
                if (mounted) {
                  Navigator.of(context).pop();
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('비밀번호 재설정 이메일이 발송되었습니다.')),
                  );
                }
              } catch (e) {
                if (mounted) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('오류: $e')),
                  );
                }
              }
            },
            child: const Text('전송'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return EmailAuthForm(
      mode: _mode,
      onSubmit: _handleEmailAuth,
      onModeSwitch: () {
        setState(() {
          _mode = _mode == EmailAuthMode.signIn 
              ? EmailAuthMode.signUp 
              : EmailAuthMode.signIn;
        });
      },
      onForgotPassword: _handleForgotPassword,
      isLoading: _isLoading,
    );
  }
}